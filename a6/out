WAIN wain
LPAREN (
INT int
ID a
COMMA ,
INT int
ID b
RPAREN )
LBRACE {
INT int
ID xxx
SEMI ;
INT int
ID yyy
SEMI ;
IF if
LPAREN (
ID x
EQ ==
ID y
RPAREN )
LBRACE {
ID a
BECOMES =
ID b
SEMI ;
RBRACE }
ELSE else
LBRACE {
ID c
BECOMES =
ID d
SEMI ;
RBRACE }
WHILE while
LPAREN (
ID a
PLUS +
ID b
LE <=
ID c
STAR *
ID d
RPAREN )
LBRACE {
RBRACE }
ID a
BECOMES =
ID b
PLUS +
NUM 1
STAR *
LPAREN (
ID c
PCT %
ID d
MINUS -
ID e
SLASH /
ID x
RPAREN )
SEMI ;
ID c
BECOMES =
NUM 132
SEMI ;
RETURN return
ID a
PLUS +
ID b
SEMI ;
RBRACE }
INT int
WAIN wain
LPAREN (
INT int
STAR *
ID a
COMMA ,
INT int
ID N
RPAREN )
LBRACE {
INT int
ID i
BECOMES =
NUM 0
SEMI ;
INT int
ID j
BECOMES =
NUM 0
SEMI ;
INT int
ID k
BECOMES =
NUM 0
SEMI ;
INT int
ID sum
BECOMES =
NUM 0
SEMI ;
INT int
ID n
BECOMES =
NUM 0
SEMI ;
INT int
ID max
BECOMES =
NUM 0
SEMI ;
ID n
BECOMES =
STAR *
LPAREN (
ID a
RPAREN )
SEMI ;
WHILE while
LPAREN (
ID i
LT <
ID n
RPAREN )
LBRACE {
ID j
BECOMES =
NUM 0
SEMI ;
WHILE while
LPAREN (
ID j
LT <
ID n
RPAREN )
LBRACE {
ID sum
BECOMES =
NUM 0
SEMI ;
ID k
BECOMES =
NUM 0
SEMI ;
WHILE while
LPAREN (
ID k
LT <
ID n
RPAREN )
LBRACE {
ID sum
BECOMES =
ID sum
PLUS +
STAR *
LPAREN (
ID a
PLUS +
NUM 1
PLUS +
ID n
STAR *
ID i
PLUS +
ID k
RPAREN )
STAR *
STAR *
LPAREN (
ID a
PLUS +
NUM 1
PLUS +
ID n
STAR *
ID n
PLUS +
ID n
STAR *
ID k
PLUS +
ID j
RPAREN )
SEMI ;
ID k
BECOMES =
ID k
PLUS +
NUM 1
SEMI ;
